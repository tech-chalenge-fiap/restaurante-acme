image: atlassian/default-image:2
options:
  docker: true

definitions:
  services:
    docker:
      memory: 2048
  steps:
  - step: &buildAndPush
      name: "build_and_push"
      size: 2x
      image: atlassian/pipelines-awscli
      services:
      - docker
      script:
      - export IMAGE_NAME=$DOCKER_ECR_REPO_URL/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT
      - echo $(aws ecr get-login --no-include-email --region sa-east-1)  > login.sh
      - sh login.sh
      - docker build -t $IMAGE_NAME .
      - docker push $IMAGE_NAME
  - step: &deployStage
      name: "deploy_eks_stage"
      deployment: stage
      script:
      - envsubst < ./manifest/deployment-template.yml > ./manifest/deployment.yml
      - pipe: atlassian/aws-eks-kubectl-run:2.2.0
        variables:
          CLUSTER_NAME: "pontaltech-eks-staging"
          KUBECTL_COMMAND: "apply"
          RESOURCE_PATH: "./manifest/deployment.yml"
          DEBUG: "false"
  - step: &deployProd
      name: "Deploy to EKS Production"
      deployment: Production
      script:
      - envsubst < ./manifest/deployment-prod-template.yml > ./manifest/deployment.yml
      - pipe: atlassian/aws-eks-kubectl-run:2.2.0
        variables:
          CLUSTER_NAME: "pontaltech-eks-production"
          KUBECTL_COMMAND: "apply"
          RESOURCE_PATH: "./manifest/deployment.yml"
          DEBUG: "false"
  - step: &buildAndPushHuawei
      name: "Build and Push Huawei"
      caches: 
        - docker
      services:
        - docker
      script:
        - export IMAGE_NAME=$HUAWEI_DOCKER_DOMAIN/$HUAWEI_ORGANIZATION_NAME/$DOCKER_IMAGE_NAME:$BITBUCKET_COMMIT
        - docker login -u $HUAWEI_DOCKER_USERNAME -p $HUAWEI_DOCKER_PASSWORD $HUAWEI_DOCKER_DOMAIN
        - docker build -t $IMAGE_NAME .
        - docker push $IMAGE_NAME
        - pipe: sonarsource/sonarqube-scan:1.1.0
          variables:
            SONAR_HOST_URL: ${SONAR_URI}
            SONAR_TOKEN: ${SONAR_TOKEN}
            EXTRA_ARGS: '-Dsonar.projectKey=${DOCKER_IMAGE_NAME}'
      after-script:
        - |
          apk add --update --no-cache curl &&
          curl -X POST --header 'Content-Type: application/json' -d "{\"text\":\"# **Build image** <strong style='color: #339cff;'>$DOCKER_IMAGE_NAME</strong> <strong style='color: $([ $BITBUCKET_EXIT_CODE = '0' ] && echo '#72ff72' || echo '#e05151');'> $([ $BITBUCKET_EXIT_CODE = '0' ] && echo 'success' || echo fail) </strong>\"}" $([ $BITBUCKET_BRANCH = "huawei/main" ] && echo $TEAMS_WEBHOOK_PRODUCTION || echo $TEAMS_WEBHOOK_STAGE)
  - step: &deployHuawei
      script:
        - | 
          for file in ./kubernetes/huawei/*.yaml
            do
                envsubst < "$file" > "$file.tmp"
                mv "$file.tmp" "$file"
            done
        - pipe: atlassian/kubectl-run:3.8.1
          variables:
            KUBE_CONFIG: $HUAWEI_KUBE_CONFIG
            KUBECTL_COMMAND: "apply"
            RESOURCE_PATH: "./kubernetes/huawei"
            DEBUG: "false"
      after-script:
        - |
          curl -X POST --header 'Content-Type: application/json' -d "{\"text\":\"# **Deploy** <strong style='color: #339cff;'>$DOCKER_IMAGE_NAME</strong> <strong style='color: $([ $BITBUCKET_EXIT_CODE = '0' ] && echo '#72ff72' || echo '#e05151');'> $([ $BITBUCKET_EXIT_CODE = '0' ] && echo 'success' || echo fail) </strong>\"}" $([ $BITBUCKET_BRANCH = "huawei/main" ] && echo $TEAMS_WEBHOOK_PRODUCTION || echo $TEAMS_WEBHOOK_STAGE)
pipelines:
  branches:
    '{stage}':
    - step: *buildAndPush
    - step: *deployStage
    '{main}':
    - step: *buildAndPush
    - step: *deployProd
    '{huawei/stage}':
      - step: *buildAndPushHuawei
      - step:
          <<: *deployHuawei
          deployment: huawei-stage
          name: "Deploy to Huawei stage"
    '{huawei/main}':
      - step: *buildAndPushHuawei
      - step:
          <<: *deployHuawei
          deployment: huawei-production
          name: "Deploy to Huawei production"
